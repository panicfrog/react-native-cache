import java.nio.file.Paths

buildscript {
  if (project == rootProject) {
    repositories {
      google()
      mavenCentral()
      maven {
        url "https://plugins.gradle.org/m2/"
      }
    }
    dependencies {
      classpath 'com.android.tools.build:gradle:4.0.1'
    }
  }
}

apply plugin: 'com.android.library'

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def getExtOrDefault(name, defaultValue) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : defaultValue
}

def found = false
def basePath = projectDir.toPath().normalize()

def nodeModulesDir = Paths.get(basePath.getParent().toString(), "example/node_modules")
def reactNativeDir = Paths.get(nodeModulesDir.toString(), "react-native/android")
if (nodeModulesDir.toFile().exists() && reactNativeDir.toFile().exists()) {
  found = true
}

if(!found) {
  // Node's module resolution algorithm searches up to the root directory,
  // after which the base path will be null
  while (basePath) {
    nodeModulesDir = Paths.get(basePath.toString(), "node_modules")
    reactNativeDir = Paths.get(nodeModulesDir.toString(), "react-native/android")
    if (nodeModulesDir.toFile().exists() && reactNativeDir.toFile().exists()) {
      found = true
      break;
    }
    basePath = basePath.getParent()
  }
}

if(!found) {
  throw new GradleException(
    "${project.name}: unable to locate React Native android sources. " +
      "Ensure you have you installed React Native as a dependency in your project and try again.")
}

def nodeModulesPath = nodeModulesDir.toString().replace("\\", "/")
def reactNativePath = reactNativeDir.toString().replace("\\", "/")

android {
  compileSdkVersion safeExtGet('Cache_compileSdkVersion', 29)
  defaultConfig {
    minSdkVersion safeExtGet('Cache_minSdkVersion', 21)
    targetSdkVersion safeExtGet('Cache_targetSdkVersion', 29)
    versionCode 1
    versionName "1.0"

    externalNativeBuild {
      cmake {
        cppFlags "-O2 -frtti -fexceptions -Wall -fstack-protector-all -std=c++1y -DONANDROID"
        abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        arguments '-DANDROID_STL=c++_shared', "-DNODE_MODULES_DIR=${nodeModulesPath}"
      }
    }

  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
      version "3.10.2"
    }
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }
  lintOptions {
    disable 'GradleCompatible'
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  packagingOptions {
    excludes = ["**/libc++_shared.so","**/libjsi.so","**/libreactnativejni.so","META-INF/MANIFEST.MF"]
  }

  configurations {
    extractJNI
  }
  ndkVersion "21.4.7075529"
}

repositories {
  mavenLocal()
  maven {
    url reactNativePath
    name 'React Native sources'
  }
  google()
  mavenCentral()
}

dependencies {
  //noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-native:+'

  def rnAAR = fileTree(reactNativePath).matching({ it.include "**/**/*.aar" }).singleFile
  extractJNI(files(rnAAR))
}

def extracted = false;
task extractJNIFiles {
  if (extracted) return
  doLast {
    configurations.extractJNI.files.each {
      def file = it.absoluteFile

      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "jni/**/*"
      }
      extracted = true;
    }
  }
}

// Extract JNI files as soon as first task is added
tasks.whenTaskAdded { task ->
  task.dependsOn(extractJNIFiles);
}
